# coding: utf-8

from __future__ import absolute_import
#from swagger_server.models.binary import Binary
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from util import deserialize_model


class Html2pdfExtrafiles(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name: str=None, content: bytes=None):
        """
        Html2pdfExtrafiles - a model defined in Swagger

        :param name: The name of this Html2pdfExtrafiles.
        :type name: str
        :param content: The content of this Html2pdfExtrafiles.
        :type content: Binary
        """
        self.swagger_types = {
            'name': str,
            'content': bytes
        }

        self.attribute_map = {
            'name': 'name',
            'content': 'content'
        }

        self._name = name
        self._content = content

    @classmethod
    def from_dict(cls, dikt) -> 'Html2pdfExtrafiles':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The html2pdf_extrafiles of this Html2pdfExtrafiles.
        :rtype: Html2pdfExtrafiles
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this Html2pdfExtrafiles.

        :return: The name of this Html2pdfExtrafiles.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Html2pdfExtrafiles.

        :param name: The name of this Html2pdfExtrafiles.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def content(self) -> bytes:
        """
        Gets the content of this Html2pdfExtrafiles.

        :return: The content of this Html2pdfExtrafiles.
        :rtype: Binary
        """
        return self._content

    @content.setter
    def content(self, content: bytes):
        """
        Sets the content of this Html2pdfExtrafiles.

        :param content: The content of this Html2pdfExtrafiles.
        :type content: Binary
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

